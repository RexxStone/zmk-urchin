/*
 * Copyright (c) 2020 duckyb
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include "keymap_german.h"

// Layer definitions
    #define BASE 0
	#define OH1 1
	#define OH2 2
	#define OHX1 3
	#define OHX2 4
    #define SYM 5
    #define EXT 6
    #define FNC 7
    #define SYM2 8
	#define GAME 9
	#define GAME2 10
	#define SETTINGS 11
// -----------------

// combo macro definition
#define COMBO(NAME, BINDINGS, KEYPOS, LAYERS) \
  	combo_##NAME { \
    	timeout-ms = <50>; \
    	bindings = <BINDINGS>; \
    	key-positions = <KEYPOS>; \
    	layers = <LAYERS>; \
	};

&sk {
    // don't release mods on other mods presses
    ignore-modifiers;
};
&sl {
    release-after-ms = <1000>;
};

/ {
	behaviors {
        apexcl: apos_excl {
            compatible = "zmk,behavior-mod-morph";
            label = "APOS_EXCL";
            #binding-cells = <0>;
            bindings = <&kp DE_APOS>, <&kp DE_EXCL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        slaqm: slash_qmark {
            compatible = "zmk,behavior-mod-morph";
            label = "SLASH_QMARK";
            #binding-cells = <0>;
            bindings = <&kp DE_SLASH>, <&kp DE_QMARK>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

		kp_sl: behavior_kp_sl {
            compatible = "zmk,behavior-hold-tap";
            label = "kp_sl";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <180>;
            bindings = <&kp>, <&sl>;
        };

		mo_sl: behavior_mo_sl {
            compatible = "zmk,behavior-hold-tap";
            label = "mo_sl";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <180>;
            bindings = <&mo>, <&sl>;
        };

		mo_kp: behavior_mo_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "mo_kp";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <180>;
            bindings = <&mo>, <&kp>;
        };

		ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP";
            #binding-cells = <2>;
            tapping_term_ms = <135>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        }; 

		// separate sticky behavior for lazy keys
		sk_lazy: behavior_sk_lazy {
			compatible = "zmk,behavior-sticky-key";
			label = "sk_lazy";
			#binding-cells = <1>;
			bindings = <&kp>;
    		release-after-ms = <1000>;
    		ignore-modifiers;
			lazy;
		};

		// for alt key
		sk_nl: behaviour_sk_nolazy_hold {
			compatible = "zmk,behavior-hold-tap";
            label = "sk_nl";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <180>;
            bindings = <&kp>, <&sk>;
			hold-while-undecided;
			hold-while-undecided-linger;
		};

		// for shift + ctrl keys 
		sk_lh: behaviour_sk_lazy_hold {
			compatible = "zmk,behavior-hold-tap";
            label = "sk_lh";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <180>;
            bindings = <&kp>, <&sk_lazy>;
			hold-while-undecided;
		};

		// for gui key
		sk_nh: behaviour_sk_lazy_nohold {
			compatible = "zmk,behavior-hold-tap";
            label = "sk_nh";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <180>;
            bindings = <&kp>, <&sk_lazy>;
		};
    };
	
    macros {
		// sometimes my device thinks a modifier is being held down
		// pressing all modifiers fixes it.
		unstick: unstick {
			label = "ZM_unstick";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp LSHIFT &kp RSHIFT &kp LCTRL &kp RCTRL &kp LALT &kp RALT &kp LGUI &kp RGUI>;
		};
    };

    combos {
		compatible = "zmk,combos";

		COMBO(game, &to GAME, 32 33, BASE)
		COMBO(sym2, &mo SYM2, 31 33, BASE SYM EXT FNC SYM2)
		COMBO(settings, &mo SETTINGS, 30 31, BASE SYM EXT FNC SYM2 SETTINGS)

		COMBO(acu, &kp DE_ACU, 0 1, OH1)
		COMBO(caret, &kp DE_CARET, 1 2, OH1)
		COMBO(grave, &kp DE_GRAVE, 2 3, OH1)
		COMBO(tilde, &kp DE_TILDE, 3 4, OH1)
		COMBO(at, &kp DE_AT, 10 11, OH1)
		COMBO(prcnt, &kp DE_PRCNT, 11 12, OH1)
		COMBO(eur, &kp DE_EUR, 12 13, OH1)
		COMBO(pipe, &kp DE_PIPE, 13 14, OH1)
		COMBO(sect, &kp DE_SECT, 20 21, OH1)
		COMBO(deg, &kp DE_DEG, 21 22, OH1)
		COMBO(dllr, &kp DE_DLLR, 22 23, OH1)
		COMBO(my, &kp DE_MY, 23 24, OH1)
		COMBO(csz, &kp DE_CSZ, 0 10, OH1)
		COMBO(bslh, &kp DE_BSLH, 10 20, OH1)
		COMBO(sqrd, &kp DE_SQRD, 12 22, OH1)
		COMBO(qbd, &kp DE_QBD, 13 23, OH1)

		COMBO(cuuml, &kp DE_CUUML, 0 1, OH2)
		COMBO(cauml, &kp DE_CAUML, 10 11, OH2)
		COMBO(couml, &kp DE_COUML, 20 21, OH2)
    };

    keymap {
		compatible = "zmk,keymap";

        // Base alpha layer
		default_layer {
			label = "Base";
			bindings = <
			&kp Q &kp W &kp F &kp P			  &kp B					&kp J     &kp L  &kp U     &kp Z   &apexcl
			&kp A &kp R &kp S &kp T			  &kp G					&kp M     &kp N  &kp E     &kp I   &kp O
			&kp Y &kp X &kp C &kp D			  &kp V					&kp K     &kp H  &kp COMMA &kp DOT &slaqm
							  &mo_sl EXT OHX1 &kp_sl LSHIFT OH1		&kp SPACE &mo SYM
			>;
		};

		// Used for one handed typing
		one_handed_1_layer {
			label = "OH.1";
			bindings = <
			&ht DE_DQT DE_APOS &ht N7 Z	  &ht N8 U	   &ht N9 L			&ht DE_AMPS J			&trans &trans &trans &trans &trans
			&ht N0 O		   &ht N4 I	  &ht N5 E	   &ht N6 N			&ht DE_UNDER M			&trans &trans &trans &trans &trans
			&ht DE_SZ DE_SLASH &ht N1 DOT &ht N2 COMMA &ht N3 H			&ht DE_HASH K			&trans &trans &trans &trans &trans
													   &mo_kp EXT ENTER	&mo_kp OH2 SPACE 		&trans &trans
			>;
		};
		one_handed_2_layer {
			label = "OH.2";
			bindings = <
			&ht DE_UUML DE_EXCL  &ht DE_LT LS(Z)	 &ht DE_EQUAL LS(U)	   &ht DE_GT LS(L) 	 &ht DE_PLUS LS(J)		&trans &trans &trans &trans &trans
			&ht DE_AUML LS(O)	 &ht DE_LBRC LS(I)	 &ht DE_LBKT LS(E)	   &ht DE_LPAR LS(N) &ht DE_MINUS LS(M)		&trans &trans &trans &trans &trans
			&ht DE_OUML DE_QMARK &ht DE_RBRC LS(DOT) &ht DE_RBKT LS(COMMA) &ht DE_RPAR LS(H) &ht DE_ASTRK LS(K)		&trans &trans &trans &trans &trans
							  		 									   &trans			 &trans					&trans &trans
			>;
		};

		// Additional one handed extended layers
		one_handed_ext_1_layer {
			label = "OHX.1";
			bindings = <
			&ht F12 Q &ht F7 W &ht F8 F &ht F9 P &ht C_VOL_UP B		&trans &trans &trans &trans &trans
			&ht F11 A &ht F4 R &ht F5 S &ht F6 T &ht C_MUTE G		&trans &trans &trans &trans &trans
			&ht F10 Y &ht F1 X &ht F2 C &ht F3 D &ht C_VOL_DN V		&trans &trans &trans &trans &trans
										&mo OHX2 &trans			 	&trans &trans
			>;
		};
		one_handed_ext_2_layer {
			label = "OHX.2";
			bindings = <
			&kp ESC		 &kp HOME	  &kp UP		  &kp END	&kp DEL			&kp PG_UP    &kp HOME &kp UP          &kp END   &kp CAPS
			&kp PSCRN	 &kp LEFT	  &kp DOWN		  &kp RIGHT	&kp BSPC		&kp PG_DN    &kp LEFT &kp DOWN        &kp RIGHT &kp DEL
			&kp LC(DE_Z) &kp LC(DE_Y) &ht LC(X) LC(C) &kp TAB	&kp LC(V)		&kp LC(BSPC) &kp BSPC &kp PAUSE_BREAK &kp PSCRN	&kp LC(DEL)
													  &trans	&trans		    &kp ENTER    &mo FNC
			>;
		};

        // Numbers and high frequency symbols
		sym_layer {
			label = "Sym.";
			bindings = <
			&kp DE_UUML &kp DE_LT 	&kp DE_EQUAL &kp DE_GT 	 &kp DE_PLUS	&kp DE_AMPS  &kp N7 &kp N8 &kp N9 &kp DE_DQT
			&kp DE_AUML &kp DE_LBRC &kp DE_LBKT  &kp DE_LPAR &kp DE_MINUS	&kp DE_UNDER &kp N4 &kp N5 &kp N6 &kp N0
			&kp DE_OUML &kp DE_RBRC	&kp DE_RBKT  &kp DE_RPAR &kp DE_ASTRK 	&kp DE_HASH  &kp N1 &kp N2 &kp N3 &kp DE_SZ
												 &mo FNC	 &mo SYM2       &trans 		 &trans
			>;
		};

        // Main modifiers and arrow keys
		ext_layer {
			label = "Mods";
			bindings = <
			&kp ESC          &kp C_PREV       &kp C_PP             &kp C_NEXT         &kp DEL		&kp PG_UP    &kp HOME &kp UP          &kp END   &kp CAPS
			&sk_nl LALT LALT &sk_nh LGUI LGUI &sk_lh LSHIFT LSHIFT &sk_lh LCTRL LCTRL &kp BSPC		&kp PG_DN    &kp LEFT &kp DOWN        &kp RIGHT &kp DEL
			&kp LC(DE_Z)     &kp LC(DE_Y)	  &ht LC(X) LC(C)      &kp TAB            &kp LC(V)     &kp LC(BSPC) &kp BSPC &kp PAUSE_BREAK &kp PSCRN	&kp LC(DEL)
											                       &trans 	          &none		    &kp ENTER    &mo FNC
			>;
		};

        // Function keys with modifiers
		fnc_layer {
			label = "FRow";
			bindings = <
			&none 	 &kp C_VOL_DN &kp C_MUTE &kp C_VOL_UP &none		&none &kp F7 &kp F8 &kp F9 &kp F12
			&sk LALT &sk LGUI 	  &sk LSHIFT &sk LCTRL 	  &sk RALT  &none &kp F4 &kp F5 &kp F6 &kp F11
			&none 	 &kp C_BRI_DN &none 	 &kp C_BRI_UP &none		&none &kp F1 &kp F2 &kp F3 &kp F10
							  	  			 &none		  &none		&none &none
			>;
		};

        // Low frequency symbols.
		symbols_2_layer {
			label = "Sym.2";
			bindings = <
			&kp DE_CUUML &kp DE_ACU  &kp DE_CARET &kp DE_GRAVE &kp DE_TILDE		&none &none &none		&none	   &none
			&kp DE_CAUML &kp DE_AT   &kp DE_PRCNT &kp DE_EUR   &kp DE_PIPE		&none &none &none 		&none 	   &kp DE_CSZ
			&kp DE_COUML &kp DE_SECT &kp DE_DEG   &kp DE_DLLR  &kp DE_MY    	&none &none &kp DE_SQRD &kp DE_QBD &kp DE_BSLH
												  &none		   &none        	&none &none 
			>;
		};

		// Used for Gaming.
		gaming_layer {
			label = "Gaming";
			bindings = <
			&kp TAB    &kp Q &kp W &kp E 	 &kp R		&to BASE &none 	  &kp UP   &none 	 &none 
			&kp LSHIFT &kp A &kp S &kp D 	 &kp F		&to BASE &kp LEFT &kp DOWN &kp RIGHT &kp RSHIFT
			&kp LCTRL  &kp Y &kp X &kp C	 &kp V		&to BASE &kp BSPC &none    &none 	 &kp RCTRL
							  	   &mo GAME2 &kp SPACE  &to BASE &to BASE 
			>;
		};
		gaming_2_layer {
			label = "Gaming2";
			bindings = <
			&kp ESC   &kp N1 &kp N2 &kp N3 &kp T	&kp Z &kp U &kp I 	  &kp O   &kp P 
			&kp ENTER &kp N4 &kp N5 &kp N6 &kp G	&kp H &kp J &kp K 	  &kp L   &kp DE_PLUS
			&kp LALT  &kp N7 &kp N8 &kp N9 &kp B	&kp N &kp M &kp COMMA &kp DOT &kp DE_MINUS
							  		&trans &none	&none &none 
			>;
		};

		// Used to change the keyboard's settings.
		settings_layer {
			label = "Sett.";
			bindings = <
			&bootloader &none &none &bt BT_CLR &bt BT_SEL 0		&bt BT_SEL 3 &none &unstick &none &bootloader 
			&none 		&none &none &none      &bt BT_SEL 1		&bt BT_SEL 4 &none &none 	&none &none
			&none 		&none &none &none      &bt BT_SEL 2		&bt BT_SEL 5 &none &none 	&none &none
									&none 	   &none			&none 		 &none 
			>;
		};
	};
};
